#!/usr/bin/awk -F, -f

# generated by: awk-csvalid https://github.com/tesera/awk-csvalid

# awk-csvalid csv toolset generator: https://github.com/tesera/awk-csvalid
# usage:
#    validate:     awk -f action=validate validator.awk > violations.txt
#    create table: awk -v action=table -f validator.awk | psql afgo_dev
#    sanitize csv: awk -v action=sanitize -f validator.awk > sanitized.csv
#    insert sql:   awk -v action=insert -f validator.awk | psql afgo_dev

# awk is a simple unix text file parser: http://www.gnu.org/software/gawk/manual/gawk.html
# awk primer:
#    NR = number/index current record
#    RS = record seperator new line i.e. \n
#    FS = field seperator i.e. ,
#    /pattern/ { expression } = if pattern is truthy run expression

BEGIN {
    FS=","; OFS=","; err_count=0; cats["na"]=0;
    if(!action) action = "validate"
    summary_header="file_name,field_name,rule,message,violation_count"
    CSVFILENAME = CSVFILENAME ? CSVFILENAME : FILENAME
    FPAT = "([^,]*)|(\"[^\"]+\")"
}

# builtin helper functions
function eql(x,y) {v=1; for (i in x) v=(v&&x[i]==y[i]); return v;}
function are_headers_valid(valid_headers) { v=0; split($0, h, ","); split(valid_headers, vh, "|"); return eql(h, vh); }
function is_unique(i, val) { if (vals[i,val]) { return 0; } else { vals[i,val] = 1; return 1; } }
function is_integer(x) { return x ~ /^-?[0-9]+$/ }
function is_number(x) { return x ~ /^-?[0-9]+(.[0-9]+)?$/ }
function print_cats(categories) { for (category in categories) { if (categories[category]) print "      " category ": " categories[category]; } }
function log_err(cat) { cats[cat]++; err_count++; }


#get rid of the evil windows cr
{ sub("\r$", "") }


{
     for (i = 1; i <= NF; i++) {
         if (substr($i, 1, 1) == "\"") {
             len = length($i)
             $i = substr($i, 2, len - 2)
         }
     }
}


# make header index/map
NR > 1 {
field_width = 29
    company=$1
    company_plot_number=$2
    company_stand_number=$3
    establishment_year=$4
    establishment_month=$5
    establishment_day=$6
    fmu=$7
    fma=$8
    ats_township=$9
    ats_range=$10
    ats_meridian=$11
    ats_section=$12
    opening_number=$13
    sampling_unit_number=$14
    topographic_position=$15
    elevation=$16
    slope=$17
    aspect=$18
    x_coord=$19
    y_coord=$20
    utm_zone=$21
    datum=$22
    latitude=$23
    longitude=$24
    natural_subregion=$25
    ecosite_guide=$26
    ecosite=$27
    ecosite_phase=$28
    plot_comment=$29
}

# awk rules based on user csv ruleset
NR == 1 && action == "validate" { headers="company|company_plot_number|company_stand_number|establishment_year|establishment_month|establishment_day|fmu|fma|ats_township|ats_range|ats_meridian|ats_section|opening_number|sampling_unit_number|topographic_position|elevation|slope|aspect|x_coord|y_coord|utm_zone|datum|latitude|longitude|natural_subregion|ecosite_guide|ecosite|ecosite_phase|plot_comment"; if (!are_headers_valid(headers)) { gsub(/\|/, FS, headers); print  NR FS CSVFILENAME FS "header" FS "invalid-header" FS "error" FS  "headers are invalid "; exit 0;} }
NR == 1 && action == "validate:summary" { headers="company|company_plot_number|company_stand_number|establishment_year|establishment_month|establishment_day|fmu|fma|ats_township|ats_range|ats_meridian|ats_section|opening_number|sampling_unit_number|topographic_position|elevation|slope|aspect|x_coord|y_coord|utm_zone|datum|latitude|longitude|natural_subregion|ecosite_guide|ecosite|ecosite_phase|plot_comment"; if (!are_headers_valid(headers)) { violations[CSVFILENAME FS "headers" FS  "names" FS "csv headers are invalid" FS "error"]=1; exit 0; } }

action == "validate" && NR > 1 && NF != field_width { log_err("error"); print  NR FS CSVFILENAME FS  FS "invalid-column-count" FS "error" FS  "row " NR " has an invalid column count" FS ""} 
action == "validate:summary" && NR > 1 && NF != field_width { key=CSVFILENAME FS "" FS  "invalid-column-count" FS "row " NR " has an invalid column count" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "company value is required but was empty" FS "company"} 
action == "validate:summary" && NR > 1 && company == "" { key=CSVFILENAME FS "company" FS  "required" FS "company value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company != "" && company !~ /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "company value should match: /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/" FS "company"} 
action == "validate:summary" && NR > 1 && company != "" && company !~ /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/ { key=CSVFILENAME FS "company" FS  "pattern" FS "company value should match: /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_plot_number == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "company_plot_number value is required but was empty" FS "company_plot_number"} 
action == "validate:summary" && NR > 1 && company_plot_number == "" { key=CSVFILENAME FS "company_plot_number" FS  "required" FS "company_plot_number value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && !is_unique(company_plot_number) { log_err("error"); print  NR FS CSVFILENAME FS  FS "unique" FS "error" FS  "company_plot_number value should be unique but had duplicates" FS "company_plot_number"} 
action == "validate:summary" && NR > 1 && !is_unique(company_plot_number) { key=CSVFILENAME FS "company_plot_number" FS  "unique" FS "company_plot_number value should be unique but had duplicates" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_plot_number != "" && length(company_plot_number) > 15 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "company_plot_number max length is: 15" FS "company_plot_number"} 
action == "validate:summary" && NR > 1 && company_plot_number != "" && length(company_plot_number) > 15 { key=CSVFILENAME FS "company_plot_number" FS  "maxLength" FS "company_plot_number max length is: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_stand_number != "" && length(company_stand_number) > 15 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "company_stand_number max length is: 15" FS "company_stand_number"} 
action == "validate:summary" && NR > 1 && company_stand_number != "" && length(company_stand_number) > 15 { key=CSVFILENAME FS "company_stand_number" FS  "maxLength" FS "company_stand_number max length is: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_year != "" && !is_integer(establishment_year) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "establishment_year should be an integer" FS "establishment_year"} 
action == "validate:summary" && NR > 1 && establishment_year != "" && !is_integer(establishment_year) { key=CSVFILENAME FS "establishment_year" FS  "type" FS "establishment_year should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_year == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "establishment_year value is required but was empty" FS "establishment_year"} 
action == "validate:summary" && NR > 1 && establishment_year == "" { key=CSVFILENAME FS "establishment_year" FS  "required" FS "establishment_year value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_year != "" && establishment_year < 1900 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "establishment_year value should be greater or equal to: 1900" FS "establishment_year"} 
action == "validate:summary" && NR > 1 && establishment_year != "" && establishment_year < 1900 { key=CSVFILENAME FS "establishment_year" FS  "minimum" FS "establishment_year value should be greater or equal to: 1900" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_year != "" && establishment_year > 2050 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "establishment_year value should be less or equal to: 2050" FS "establishment_year"} 
action == "validate:summary" && NR > 1 && establishment_year != "" && establishment_year > 2050 { key=CSVFILENAME FS "establishment_year" FS  "maximum" FS "establishment_year value should be less or equal to: 2050" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_month != "" && !is_integer(establishment_month) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "establishment_month should be an integer" FS "establishment_month"} 
action == "validate:summary" && NR > 1 && establishment_month != "" && !is_integer(establishment_month) { key=CSVFILENAME FS "establishment_month" FS  "type" FS "establishment_month should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_month == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "establishment_month value is required but was empty" FS "establishment_month"} 
action == "validate:summary" && NR > 1 && establishment_month == "" { key=CSVFILENAME FS "establishment_month" FS  "required" FS "establishment_month value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_month != "" && establishment_month < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "establishment_month value should be greater or equal to: 1" FS "establishment_month"} 
action == "validate:summary" && NR > 1 && establishment_month != "" && establishment_month < 1 { key=CSVFILENAME FS "establishment_month" FS  "minimum" FS "establishment_month value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_month != "" && establishment_month > 12 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "establishment_month value should be less or equal to: 12" FS "establishment_month"} 
action == "validate:summary" && NR > 1 && establishment_month != "" && establishment_month > 12 { key=CSVFILENAME FS "establishment_month" FS  "maximum" FS "establishment_month value should be less or equal to: 12" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_day != "" && !is_integer(establishment_day) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "establishment_day should be an integer" FS "establishment_day"} 
action == "validate:summary" && NR > 1 && establishment_day != "" && !is_integer(establishment_day) { key=CSVFILENAME FS "establishment_day" FS  "type" FS "establishment_day should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_day == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "establishment_day value is required but was empty" FS "establishment_day"} 
action == "validate:summary" && NR > 1 && establishment_day == "" { key=CSVFILENAME FS "establishment_day" FS  "required" FS "establishment_day value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_day != "" && establishment_day < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "establishment_day value should be greater or equal to: 1" FS "establishment_day"} 
action == "validate:summary" && NR > 1 && establishment_day != "" && establishment_day < 1 { key=CSVFILENAME FS "establishment_day" FS  "minimum" FS "establishment_day value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && establishment_day != "" && establishment_day > 31 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "establishment_day value should be less or equal to: 31" FS "establishment_day"} 
action == "validate:summary" && NR > 1 && establishment_day != "" && establishment_day > 31 { key=CSVFILENAME FS "establishment_day" FS  "maximum" FS "establishment_day value should be less or equal to: 31" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && fmu == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "fmu value is required but was empty" FS "fmu"} 
action == "validate:summary" && NR > 1 && fmu == "" { key=CSVFILENAME FS "fmu" FS  "required" FS "fmu value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && fmu != "" && fmu !~ /^(A10|A11|A12|A13|A14|A15|A4|A5|A6|A7|A8|A9|B10|B11|B9|BO1|BO2|C4|C5|CO1|CO2|E1|E10|E11|E13|E14|E15|E2|E3|E4|E5|E6|E7|E8|E9|EO1|F1|F10|F11|F14|F20|F21|F23|F24|F25|F26|FO1|G1|G10|G11|G12|G13|G14|G15|G16|G2|G3|G4|G5|G6|G7|G8|G9|GO1|GO2|GO3|GO4|H1|L1|L11|L2|L3|L8|L9|LO1|M1|M10|M3|M4|M7|M9|NA|P1|P10|P11|P13|P14|P19|P20|P21|P3|P4|P5|P6|P7|P8|P9|PO1|PO2|PO3|R1|R10|R11|R12|R13|R14|R2|R2U|R3|R4|R4Y|RO1|S10|S11|S14|S15|S16|S17|S18|S19|S20|S21|S22|S23|S24|S25|S7|S9|SO1|SO2|W1|W10|W11|W13|W14|W15|W2|W3|W4|W5|W6|W8|WO1|WO2|WO3|E14)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "fmu value should match: /^(A10|A11|A12|A13|A14|A15|A4|A5|A6|A7|A8|A9|B10|B11|B9|BO1|BO2|C4|C5|CO1|CO2|E1|E10|E11|E13|E14|E15|E2|E3|E4|E5|E6|E7|E8|E9|EO1|F1|F10|F11|F14|F20|F21|F23|F24|F25|F26|FO1|G1|G10|G11|G12|G13|G14|G15|G16|G2|G3|G4|G5|G6|G7|G8|G9|GO1|GO2|GO3|GO4|H1|L1|L11|L2|L3|L8|L9|LO1|M1|M10|M3|M4|M7|M9|NA|P1|P10|P11|P13|P14|P19|P20|P21|P3|P4|P5|P6|P7|P8|P9|PO1|PO2|PO3|R1|R10|R11|R12|R13|R14|R2|R2U|R3|R4|R4Y|RO1|S10|S11|S14|S15|S16|S17|S18|S19|S20|S21|S22|S23|S24|S25|S7|S9|SO1|SO2|W1|W10|W11|W13|W14|W15|W2|W3|W4|W5|W6|W8|WO1|WO2|WO3|E14)$/" FS "fmu"} 
action == "validate:summary" && NR > 1 && fmu != "" && fmu !~ /^(A10|A11|A12|A13|A14|A15|A4|A5|A6|A7|A8|A9|B10|B11|B9|BO1|BO2|C4|C5|CO1|CO2|E1|E10|E11|E13|E14|E15|E2|E3|E4|E5|E6|E7|E8|E9|EO1|F1|F10|F11|F14|F20|F21|F23|F24|F25|F26|FO1|G1|G10|G11|G12|G13|G14|G15|G16|G2|G3|G4|G5|G6|G7|G8|G9|GO1|GO2|GO3|GO4|H1|L1|L11|L2|L3|L8|L9|LO1|M1|M10|M3|M4|M7|M9|NA|P1|P10|P11|P13|P14|P19|P20|P21|P3|P4|P5|P6|P7|P8|P9|PO1|PO2|PO3|R1|R10|R11|R12|R13|R14|R2|R2U|R3|R4|R4Y|RO1|S10|S11|S14|S15|S16|S17|S18|S19|S20|S21|S22|S23|S24|S25|S7|S9|SO1|SO2|W1|W10|W11|W13|W14|W15|W2|W3|W4|W5|W6|W8|WO1|WO2|WO3|E14)$/ { key=CSVFILENAME FS "fmu" FS  "pattern" FS "fmu value should match: /^(A10|A11|A12|A13|A14|A15|A4|A5|A6|A7|A8|A9|B10|B11|B9|BO1|BO2|C4|C5|CO1|CO2|E1|E10|E11|E13|E14|E15|E2|E3|E4|E5|E6|E7|E8|E9|EO1|F1|F10|F11|F14|F20|F21|F23|F24|F25|F26|FO1|G1|G10|G11|G12|G13|G14|G15|G16|G2|G3|G4|G5|G6|G7|G8|G9|GO1|GO2|GO3|GO4|H1|L1|L11|L2|L3|L8|L9|LO1|M1|M10|M3|M4|M7|M9|NA|P1|P10|P11|P13|P14|P19|P20|P21|P3|P4|P5|P6|P7|P8|P9|PO1|PO2|PO3|R1|R10|R11|R12|R13|R14|R2|R2U|R3|R4|R4Y|RO1|S10|S11|S14|S15|S16|S17|S18|S19|S20|S21|S22|S23|S24|S25|S7|S9|SO1|SO2|W1|W10|W11|W13|W14|W15|W2|W3|W4|W5|W6|W8|WO1|WO2|WO3|E14)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && fma == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "fma value is required but was empty" FS "fma"} 
action == "validate:summary" && NR > 1 && fma == "" { key=CSVFILENAME FS "fma" FS  "required" FS "fma value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && fma != "" && length(fma) > 30 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "fma max length is: 30" FS "fma"} 
action == "validate:summary" && NR > 1 && fma != "" && length(fma) > 30 { key=CSVFILENAME FS "fma" FS  "maxLength" FS "fma max length is: 30" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_township != "" && !is_integer(ats_township) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "ats_township should be an integer" FS "ats_township"} 
action == "validate:summary" && NR > 1 && ats_township != "" && !is_integer(ats_township) { key=CSVFILENAME FS "ats_township" FS  "type" FS "ats_township should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_township == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ats_township value is required but was empty" FS "ats_township"} 
action == "validate:summary" && NR > 1 && ats_township == "" { key=CSVFILENAME FS "ats_township" FS  "required" FS "ats_township value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_township != "" && ats_township < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "ats_township value should be greater or equal to: 1" FS "ats_township"} 
action == "validate:summary" && NR > 1 && ats_township != "" && ats_township < 1 { key=CSVFILENAME FS "ats_township" FS  "minimum" FS "ats_township value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_township != "" && ats_township > 126 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "ats_township value should be less or equal to: 126" FS "ats_township"} 
action == "validate:summary" && NR > 1 && ats_township != "" && ats_township > 126 { key=CSVFILENAME FS "ats_township" FS  "maximum" FS "ats_township value should be less or equal to: 126" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_range != "" && !is_integer(ats_range) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "ats_range should be an integer" FS "ats_range"} 
action == "validate:summary" && NR > 1 && ats_range != "" && !is_integer(ats_range) { key=CSVFILENAME FS "ats_range" FS  "type" FS "ats_range should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_range == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ats_range value is required but was empty" FS "ats_range"} 
action == "validate:summary" && NR > 1 && ats_range == "" { key=CSVFILENAME FS "ats_range" FS  "required" FS "ats_range value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_range != "" && ats_range < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "ats_range value should be greater or equal to: 1" FS "ats_range"} 
action == "validate:summary" && NR > 1 && ats_range != "" && ats_range < 1 { key=CSVFILENAME FS "ats_range" FS  "minimum" FS "ats_range value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_range != "" && ats_range > 26 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "ats_range value should be less or equal to: 26" FS "ats_range"} 
action == "validate:summary" && NR > 1 && ats_range != "" && ats_range > 26 { key=CSVFILENAME FS "ats_range" FS  "maximum" FS "ats_range value should be less or equal to: 26" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_meridian != "" && !is_integer(ats_meridian) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "ats_meridian should be an integer" FS "ats_meridian"} 
action == "validate:summary" && NR > 1 && ats_meridian != "" && !is_integer(ats_meridian) { key=CSVFILENAME FS "ats_meridian" FS  "type" FS "ats_meridian should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_meridian == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ats_meridian value is required but was empty" FS "ats_meridian"} 
action == "validate:summary" && NR > 1 && ats_meridian == "" { key=CSVFILENAME FS "ats_meridian" FS  "required" FS "ats_meridian value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_meridian != "" && ats_meridian < 4 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "ats_meridian value should be greater or equal to: 4" FS "ats_meridian"} 
action == "validate:summary" && NR > 1 && ats_meridian != "" && ats_meridian < 4 { key=CSVFILENAME FS "ats_meridian" FS  "minimum" FS "ats_meridian value should be greater or equal to: 4" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_meridian != "" && ats_meridian > 6 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "ats_meridian value should be less or equal to: 6" FS "ats_meridian"} 
action == "validate:summary" && NR > 1 && ats_meridian != "" && ats_meridian > 6 { key=CSVFILENAME FS "ats_meridian" FS  "maximum" FS "ats_meridian value should be less or equal to: 6" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_section != "" && !is_integer(ats_section) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "ats_section should be an integer" FS "ats_section"} 
action == "validate:summary" && NR > 1 && ats_section != "" && !is_integer(ats_section) { key=CSVFILENAME FS "ats_section" FS  "type" FS "ats_section should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_section == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ats_section value is required but was empty" FS "ats_section"} 
action == "validate:summary" && NR > 1 && ats_section == "" { key=CSVFILENAME FS "ats_section" FS  "required" FS "ats_section value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_section != "" && ats_section < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "ats_section value should be greater or equal to: 1" FS "ats_section"} 
action == "validate:summary" && NR > 1 && ats_section != "" && ats_section < 1 { key=CSVFILENAME FS "ats_section" FS  "minimum" FS "ats_section value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ats_section != "" && ats_section > 36 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "ats_section value should be less or equal to: 36" FS "ats_section"} 
action == "validate:summary" && NR > 1 && ats_section != "" && ats_section > 36 { key=CSVFILENAME FS "ats_section" FS  "maximum" FS "ats_section value should be less or equal to: 36" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && opening_number != "" && length(opening_number) > 11 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "opening_number max length is: 11" FS "opening_number"} 
action == "validate:summary" && NR > 1 && opening_number != "" && length(opening_number) > 11 { key=CSVFILENAME FS "opening_number" FS  "maxLength" FS "opening_number max length is: 11" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && sampling_unit_number != "" && length(sampling_unit_number) > 3 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "sampling_unit_number max length is: 3" FS "sampling_unit_number"} 
action == "validate:summary" && NR > 1 && sampling_unit_number != "" && length(sampling_unit_number) > 3 { key=CSVFILENAME FS "sampling_unit_number" FS  "maxLength" FS "sampling_unit_number max length is: 3" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && topographic_position != "" && !is_integer(topographic_position) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "topographic_position should be an integer" FS "topographic_position"} 
action == "validate:summary" && NR > 1 && topographic_position != "" && !is_integer(topographic_position) { key=CSVFILENAME FS "topographic_position" FS  "type" FS "topographic_position should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && topographic_position == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "topographic_position value is required but was empty" FS "topographic_position"} 
action == "validate:summary" && NR > 1 && topographic_position == "" { key=CSVFILENAME FS "topographic_position" FS  "required" FS "topographic_position value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && topographic_position != "" && topographic_position !~ /^(1|2|3|4|5|6|7)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "topographic_position value should match: /^(1|2|3|4|5|6|7)$/" FS "topographic_position"} 
action == "validate:summary" && NR > 1 && topographic_position != "" && topographic_position !~ /^(1|2|3|4|5|6|7)$/ { key=CSVFILENAME FS "topographic_position" FS  "pattern" FS "topographic_position value should match: /^(1|2|3|4|5|6|7)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && elevation != "" && !is_integer(elevation) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "elevation should be an integer" FS "elevation"} 
action == "validate:summary" && NR > 1 && elevation != "" && !is_integer(elevation) { key=CSVFILENAME FS "elevation" FS  "type" FS "elevation should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && elevation == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "elevation value is required but was empty" FS "elevation"} 
action == "validate:summary" && NR > 1 && elevation == "" { key=CSVFILENAME FS "elevation" FS  "required" FS "elevation value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && elevation != "" && elevation < 0 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "elevation value should be greater or equal to: 0" FS "elevation"} 
action == "validate:summary" && NR > 1 && elevation != "" && elevation < 0 { key=CSVFILENAME FS "elevation" FS  "minimum" FS "elevation value should be greater or equal to: 0" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && elevation != "" && elevation > 3747 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "elevation value should be less or equal to: 3747" FS "elevation"} 
action == "validate:summary" && NR > 1 && elevation != "" && elevation > 3747 { key=CSVFILENAME FS "elevation" FS  "maximum" FS "elevation value should be less or equal to: 3747" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && slope != "" && !is_integer(slope) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "slope should be an integer" FS "slope"} 
action == "validate:summary" && NR > 1 && slope != "" && !is_integer(slope) { key=CSVFILENAME FS "slope" FS  "type" FS "slope should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && slope == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "slope value is required but was empty" FS "slope"} 
action == "validate:summary" && NR > 1 && slope == "" { key=CSVFILENAME FS "slope" FS  "required" FS "slope value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && slope != "" && slope < 0 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "slope value should be greater or equal to: 0" FS "slope"} 
action == "validate:summary" && NR > 1 && slope != "" && slope < 0 { key=CSVFILENAME FS "slope" FS  "minimum" FS "slope value should be greater or equal to: 0" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && slope != "" && slope > 200 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "slope value should be less or equal to: 200" FS "slope"} 
action == "validate:summary" && NR > 1 && slope != "" && slope > 200 { key=CSVFILENAME FS "slope" FS  "maximum" FS "slope value should be less or equal to: 200" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && aspect == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "aspect value is required but was empty" FS "aspect"} 
action == "validate:summary" && NR > 1 && aspect == "" { key=CSVFILENAME FS "aspect" FS  "required" FS "aspect value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && aspect != "" && aspect !~ /^(E|N|NE|NW|S|SE|SW|W|NA)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "aspect value should match: /^(E|N|NE|NW|S|SE|SW|W|NA)$/" FS "aspect"} 
action == "validate:summary" && NR > 1 && aspect != "" && aspect !~ /^(E|N|NE|NW|S|SE|SW|W|NA)$/ { key=CSVFILENAME FS "aspect" FS  "pattern" FS "aspect value should match: /^(E|N|NE|NW|S|SE|SW|W|NA)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && x_coord != "" && !is_number(x_coord) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "x_coord should be a decimal number" FS "x_coord"} 
action == "validate:summary" && NR > 1 && x_coord != "" && !is_number(x_coord) { key=CSVFILENAME FS "x_coord" FS  "type" FS "x_coord should be a decimal number" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && x_coord == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "x_coord value is required but was empty" FS "x_coord"} 
action == "validate:summary" && NR > 1 && x_coord == "" { key=CSVFILENAME FS "x_coord" FS  "required" FS "x_coord value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && x_coord != "" && x_coord < 240000 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "x_coord value should be greater or equal to: 240000" FS "x_coord"} 
action == "validate:summary" && NR > 1 && x_coord != "" && x_coord < 240000 { key=CSVFILENAME FS "x_coord" FS  "minimum" FS "x_coord value should be greater or equal to: 240000" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && x_coord != "" && x_coord > 850000 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "x_coord value should be less or equal to: 850000" FS "x_coord"} 
action == "validate:summary" && NR > 1 && x_coord != "" && x_coord > 850000 { key=CSVFILENAME FS "x_coord" FS  "maximum" FS "x_coord value should be less or equal to: 850000" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && x_coord != "" && x_coord !~ /^[0-9]*.[0-9]{5}$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "x_coord value should match: /^[0-9]*.[0-9]{5}$/" FS "x_coord"} 
action == "validate:summary" && NR > 1 && x_coord != "" && x_coord !~ /^[0-9]*.[0-9]{5}$/ { key=CSVFILENAME FS "x_coord" FS  "pattern" FS "x_coord value should match: /^[0-9]*.[0-9]{5}$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && y_coord != "" && !is_number(y_coord) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "y_coord should be a decimal number" FS "y_coord"} 
action == "validate:summary" && NR > 1 && y_coord != "" && !is_number(y_coord) { key=CSVFILENAME FS "y_coord" FS  "type" FS "y_coord should be a decimal number" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && y_coord == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "y_coord value is required but was empty" FS "y_coord"} 
action == "validate:summary" && NR > 1 && y_coord == "" { key=CSVFILENAME FS "y_coord" FS  "required" FS "y_coord value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && y_coord != "" && y_coord < 5400000 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "y_coord value should be greater or equal to: 5400000" FS "y_coord"} 
action == "validate:summary" && NR > 1 && y_coord != "" && y_coord < 5400000 { key=CSVFILENAME FS "y_coord" FS  "minimum" FS "y_coord value should be greater or equal to: 5400000" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && y_coord != "" && y_coord > 6650000 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "y_coord value should be less or equal to: 6650000" FS "y_coord"} 
action == "validate:summary" && NR > 1 && y_coord != "" && y_coord > 6650000 { key=CSVFILENAME FS "y_coord" FS  "maximum" FS "y_coord value should be less or equal to: 6650000" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && y_coord != "" && y_coord !~ /^[0-9]*.[0-9]{5}$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "y_coord value should match: /^[0-9]*.[0-9]{5}$/" FS "y_coord"} 
action == "validate:summary" && NR > 1 && y_coord != "" && y_coord !~ /^[0-9]*.[0-9]{5}$/ { key=CSVFILENAME FS "y_coord" FS  "pattern" FS "y_coord value should match: /^[0-9]*.[0-9]{5}$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && utm_zone == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "utm_zone value is required but was empty" FS "utm_zone"} 
action == "validate:summary" && NR > 1 && utm_zone == "" { key=CSVFILENAME FS "utm_zone" FS  "required" FS "utm_zone value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && utm_zone != "" && utm_zone !~ /^(UTM11|UTM12)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "utm_zone value should match: /^(UTM11|UTM12)$/" FS "utm_zone"} 
action == "validate:summary" && NR > 1 && utm_zone != "" && utm_zone !~ /^(UTM11|UTM12)$/ { key=CSVFILENAME FS "utm_zone" FS  "pattern" FS "utm_zone value should match: /^(UTM11|UTM12)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && datum == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "datum value is required but was empty" FS "datum"} 
action == "validate:summary" && NR > 1 && datum == "" { key=CSVFILENAME FS "datum" FS  "required" FS "datum value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && datum != "" && datum !~ /^(NAD27|NAD83)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "datum value should match: /^(NAD27|NAD83)$/" FS "datum"} 
action == "validate:summary" && NR > 1 && datum != "" && datum !~ /^(NAD27|NAD83)$/ { key=CSVFILENAME FS "datum" FS  "pattern" FS "datum value should match: /^(NAD27|NAD83)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && latitude != "" && !is_number(latitude) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "latitude should be a decimal number" FS "latitude"} 
action == "validate:summary" && NR > 1 && latitude != "" && !is_number(latitude) { key=CSVFILENAME FS "latitude" FS  "type" FS "latitude should be a decimal number" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && latitude != "" && latitude < 49 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "latitude value should be greater or equal to: 49" FS "latitude"} 
action == "validate:summary" && NR > 1 && latitude != "" && latitude < 49 { key=CSVFILENAME FS "latitude" FS  "minimum" FS "latitude value should be greater or equal to: 49" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && latitude != "" && latitude > 60 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "latitude value should be less or equal to: 60" FS "latitude"} 
action == "validate:summary" && NR > 1 && latitude != "" && latitude > 60 { key=CSVFILENAME FS "latitude" FS  "maximum" FS "latitude value should be less or equal to: 60" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && latitude != "" && latitude !~ /^[0-9]*.[0-9]{10}$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "latitude value should match: /^[0-9]*.[0-9]{10}$/" FS "latitude"} 
action == "validate:summary" && NR > 1 && latitude != "" && latitude !~ /^[0-9]*.[0-9]{10}$/ { key=CSVFILENAME FS "latitude" FS  "pattern" FS "latitude value should match: /^[0-9]*.[0-9]{10}$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && longitude != "" && !is_number(longitude) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "longitude should be a decimal number" FS "longitude"} 
action == "validate:summary" && NR > 1 && longitude != "" && !is_number(longitude) { key=CSVFILENAME FS "longitude" FS  "type" FS "longitude should be a decimal number" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && longitude != "" && longitude < -120 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "longitude value should be greater or equal to: -120" FS "longitude"} 
action == "validate:summary" && NR > 1 && longitude != "" && longitude < -120 { key=CSVFILENAME FS "longitude" FS  "minimum" FS "longitude value should be greater or equal to: -120" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && longitude != "" && longitude > -110 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "longitude value should be less or equal to: -110" FS "longitude"} 
action == "validate:summary" && NR > 1 && longitude != "" && longitude > -110 { key=CSVFILENAME FS "longitude" FS  "maximum" FS "longitude value should be less or equal to: -110" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && longitude != "" && longitude !~ /^-[0-9]*.[0-9]{10}$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "longitude value should match: /^-[0-9]*.[0-9]{10}$/" FS "longitude"} 
action == "validate:summary" && NR > 1 && longitude != "" && longitude !~ /^-[0-9]*.[0-9]{10}$/ { key=CSVFILENAME FS "longitude" FS  "pattern" FS "longitude value should match: /^-[0-9]*.[0-9]{10}$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && natural_subregion == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "natural_subregion value is required but was empty" FS "natural_subregion"} 
action == "validate:summary" && NR > 1 && natural_subregion == "" { key=CSVFILENAME FS "natural_subregion" FS  "required" FS "natural_subregion value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && natural_subregion != "" && natural_subregion !~ /^(ALP|AP|BSA|CM|CP|DM|DMG|FF|FP|KU|LBH|LF|MG|MT|NF|NM|PAD|PRP|SA|UBH|UF)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "natural_subregion value should match: /^(ALP|AP|BSA|CM|CP|DM|DMG|FF|FP|KU|LBH|LF|MG|MT|NF|NM|PAD|PRP|SA|UBH|UF)$/" FS "natural_subregion"} 
action == "validate:summary" && NR > 1 && natural_subregion != "" && natural_subregion !~ /^(ALP|AP|BSA|CM|CP|DM|DMG|FF|FP|KU|LBH|LF|MG|MT|NF|NM|PAD|PRP|SA|UBH|UF)$/ { key=CSVFILENAME FS "natural_subregion" FS  "pattern" FS "natural_subregion value should match: /^(ALP|AP|BSA|CM|CP|DM|DMG|FF|FP|KU|LBH|LF|MG|MT|NF|NM|PAD|PRP|SA|UBH|UF)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ecosite_guide == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ecosite_guide value is required but was empty" FS "ecosite_guide"} 
action == "validate:summary" && NR > 1 && ecosite_guide == "" { key=CSVFILENAME FS "ecosite_guide" FS  "required" FS "ecosite_guide value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ecosite_guide != "" && ecosite_guide !~ /^(N|SW|WC)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "ecosite_guide value should match: /^(N|SW|WC)$/" FS "ecosite_guide"} 
action == "validate:summary" && NR > 1 && ecosite_guide != "" && ecosite_guide !~ /^(N|SW|WC)$/ { key=CSVFILENAME FS "ecosite_guide" FS  "pattern" FS "ecosite_guide value should match: /^(N|SW|WC)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ecosite == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ecosite value is required but was empty" FS "ecosite"} 
action == "validate:summary" && NR > 1 && ecosite == "" { key=CSVFILENAME FS "ecosite" FS  "required" FS "ecosite value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ecosite != "" && ecosite !~ /^(a|b|c|d|e|f|g|h|i|j|k|l|m|n)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "ecosite value should match: /^(a|b|c|d|e|f|g|h|i|j|k|l|m|n)$/" FS "ecosite"} 
action == "validate:summary" && NR > 1 && ecosite != "" && ecosite !~ /^(a|b|c|d|e|f|g|h|i|j|k|l|m|n)$/ { key=CSVFILENAME FS "ecosite" FS  "pattern" FS "ecosite value should match: /^(a|b|c|d|e|f|g|h|i|j|k|l|m|n)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ecosite_phase == "" { log_err("warning"); print  NR FS CSVFILENAME FS  FS "required" FS "warning" FS  "ecosite_phase value is required but was empty" FS "ecosite_phase"} 
action == "validate:summary" && NR > 1 && ecosite_phase == "" { key=CSVFILENAME FS "ecosite_phase" FS  "required" FS "ecosite_phase value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && ecosite_phase != "" && ecosite_phase !~ /^(a1|a2|a3|b1|b2|b3|b4|b5|c1|c2|c3|c4|c5|d1|d2|d3|d4|e1|e2|e3|e4|f1|f2|f3|f4|f5|f6|g1|g2|g3|h1|h2|h3|i1|i2|i3|j1|j2|j3|k1|k2|k3|l1|l2|l3|m1|m2|m3|n1)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "ecosite_phase value should match: /^(a1|a2|a3|b1|b2|b3|b4|b5|c1|c2|c3|c4|c5|d1|d2|d3|d4|e1|e2|e3|e4|f1|f2|f3|f4|f5|f6|g1|g2|g3|h1|h2|h3|i1|i2|i3|j1|j2|j3|k1|k2|k3|l1|l2|l3|m1|m2|m3|n1)$/" FS "ecosite_phase"} 
action == "validate:summary" && NR > 1 && ecosite_phase != "" && ecosite_phase !~ /^(a1|a2|a3|b1|b2|b3|b4|b5|c1|c2|c3|c4|c5|d1|d2|d3|d4|e1|e2|e3|e4|f1|f2|f3|f4|f5|f6|g1|g2|g3|h1|h2|h3|i1|i2|i3|j1|j2|j3|k1|k2|k3|l1|l2|l3|m1|m2|m3|n1)$/ { key=CSVFILENAME FS "ecosite_phase" FS  "pattern" FS "ecosite_phase value should match: /^(a1|a2|a3|b1|b2|b3|b4|b5|c1|c2|c3|c4|c5|d1|d2|d3|d4|e1|e2|e3|e4|f1|f2|f3|f4|f5|f6|g1|g2|g3|h1|h2|h3|i1|i2|i3|j1|j2|j3|k1|k2|k3|l1|l2|l3|m1|m2|m3|n1)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && plot_comment != "" && length(plot_comment) > 250 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "plot_comment max length is: 250" FS "plot_comment"} 
action == "validate:summary" && NR > 1 && plot_comment != "" && length(plot_comment) > 250 { key=CSVFILENAME FS "plot_comment" FS  "maxLength" FS "plot_comment max length is: 250" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 

# sanitize rules
action ~ /^(sanitize|insert)$/ && NR > 1 {
    if (establishment_day == "") $6 = "\\N"
    if (ecosite_phase == "") $28 = "\\N"
    if (latitude == "") $23 = "\\N"
    if (utm_zone == "") $21 = "\\N"
    if (sampling_unit_number == "") $14 = "\\N"
    if (fma == "") $8 = "\\N"
    if (establishment_year == "") $4 = "\\N"
    if (company_stand_number == "") $3 = "\\N"
    if (slope == "") $17 = "\\N"
    if (ecosite == "") $27 = "\\N"
    if (topographic_position == "") $15 = "\\N"
    if (company_plot_number == "") $2 = "\\N"
    if (longitude == "") $24 = "\\N"
    if (elevation == "") $16 = "\\N"
    if (ats_range == "") $10 = "\\N"
    if (x_coord == "") $19 = "\\N"
    if (natural_subregion == "") $25 = "\\N"
    if (datum == "") $22 = "\\N"
    if (opening_number == "") $13 = "\\N"
    if (ats_section == "") $12 = "\\N"
    if (fmu == "") $7 = "\\N"
    if (plot_comment == "") $29 = "\\N"
    if (y_coord == "") $20 = "\\N"
    if (ats_township == "") $9 = "\\N"
    if (company == "") $1 = "\\N"
    if (ecosite_guide == "") $26 = "\\N"
    if (establishment_month == "") $5 = "\\N"
    if (aspect == "") $18 = "\\N"
    if (ats_meridian == "") $11 = "\\N"
}

# action handlers
action == "insert" && NR == 1 {
    print "SET client_encoding = 'UTF8';"
    print "COPY " schema "plot (" addfields FS "source_row_index" FS $0 ") FROM stdin;"
}
action == "insert" && NR > 1 {
   record = addvals "\t" NR
   for (i = 1; i <= NF; i++) {
       record = record "\t" $i
   }
   print record
}
action == "table" && NR == 1 {
     print "CREATE TABLE IF NOT EXISTS plot (company text,company_plot_number text,company_stand_number text,establishment_year integer,establishment_month integer,establishment_day integer,fmu text,fma text,ats_township integer,ats_range integer,ats_meridian integer,ats_section integer,opening_number text,sampling_unit_number text,topographic_position integer,elevation text,slope text,aspect text,x_coord numeric,y_coord numeric,utm_zone text,datum text,latitude numeric,longitude numeric,natural_subregion text,ecosite_guide text,ecosite text,ecosite_phase text,plot_comment text);"
}
action == "sanitize" { print }
# la fin
END {
    if (action == "validate:summary" && length(dupkeys) > 0) for (dup in dupkeys) { violation=CSVFILENAME FS "" FS  "duplicate" FS dup " violates pkey" FS "error"; violations[violation] = dupkeys[dup]}
    if (action == "validate:summary") { if (length(violations) > 0) for (violation in violations) { print violation FS violations[violation]; } }
    if (action == "insert") print "\\." RS
    if (action == "validate" && options["summary"] == "true") { print RS "violation summary: " RS "   counts:   " RS "      total: " err_count; print_cats(cats); }
}
