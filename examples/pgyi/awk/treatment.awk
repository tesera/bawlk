#!/usr/bin/awk -F, -f

# generated by: awk-csvalid https://github.com/tesera/awk-csvalid

# awk-csvalid csv toolset generator: https://github.com/tesera/awk-csvalid
# usage:
#    validate:     awk -f action=validate validator.awk > violations.txt
#    create table: awk -v action=table -f validator.awk | psql afgo_dev
#    sanitize csv: awk -v action=sanitize -f validator.awk > sanitized.csv
#    insert sql:   awk -v action=insert -f validator.awk | psql afgo_dev

# awk is a simple unix text file parser: http://www.gnu.org/software/gawk/manual/gawk.html
# awk primer:
#    NR = number/index current record
#    RS = record seperator new line i.e. \n
#    FS = field seperator i.e. ,
#    /pattern/ { expression } = if pattern is truthy run expression

BEGIN {
    FS=","; OFS=","; err_count=0; cats["na"]=0;
    if(!action) action = "validate"
    summary_header="file_name,field_name,rule,message,violation_count"
    CSVFILENAME = CSVFILENAME ? CSVFILENAME : FILENAME
    FPAT = "([^,]*)|(\"[^\"]+\")"
}

# builtin helper functions
function eql(x,y) {v=1; for (i in x) v=(v&&x[i]==y[i]); return v;}
function are_headers_valid(valid_headers) { v=0; split($0, h, ","); split(valid_headers, vh, "|"); return eql(h, vh); }
function is_unique(i, val) { if (vals[i,val]) { return 0; } else { vals[i,val] = 1; return 1; } }
function is_integer(x) { return x ~ /^-?[0-9]+$/ }
function is_number(x) { return x ~ /^-?[0-9]+(.[0-9]+)?$/ }
function print_cats(categories) { for (category in categories) { if (categories[category]) print "      " category ": " categories[category]; } }
function log_err(cat) { cats[cat]++; err_count++; }


#get rid of the evil windows cr
{ sub("\r$", "") }


{
     for (i = 1; i <= NF; i++) {
         if (substr($i, 1, 1) == "\"") {
             len = length($i)
             $i = substr($i, 2, len - 2)
         }
     }
}


# make header index/map
NR > 1 {
field_width = 8
    company=$1
    company_plot_number=$2
    treatment_number=$3
    treatment_code=$4
    treatment_year=$5
    treatment_month=$6
    treatment_day=$7
    treatment_comment=$8
}

# awk rules based on user csv ruleset
NR == 1 && action == "validate" { headers="company|company_plot_number|treatment_number|treatment_code|treatment_year|treatment_month|treatment_day|treatment_comment"; if (!are_headers_valid(headers)) { gsub(/\|/, FS, headers); print  NR FS CSVFILENAME FS "header" FS "invalid-header" FS "error" FS  "headers are invalid "; exit 0;} }
NR == 1 && action == "validate:summary" { headers="company|company_plot_number|treatment_number|treatment_code|treatment_year|treatment_month|treatment_day|treatment_comment"; if (!are_headers_valid(headers)) { violations[CSVFILENAME FS "headers" FS  "names" FS "csv headers are invalid" FS "error"]=1; exit 0; } }

action == "validate" && NR > 1 && NF != field_width { log_err("error"); print  NR FS CSVFILENAME FS  FS "invalid-column-count" FS "error" FS  "row " NR " has an invalid column count" FS ""} 
action == "validate:summary" && NR > 1 && NF != field_width { key=CSVFILENAME FS "" FS  "invalid-column-count" FS "row " NR " has an invalid column count" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "company value is required but was empty" FS "company"} 
action == "validate:summary" && NR > 1 && company == "" { key=CSVFILENAME FS "company" FS  "required" FS "company value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company != "" && company !~ /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "company value should match: /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/" FS "company"} 
action == "validate:summary" && NR > 1 && company != "" && company !~ /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/ { key=CSVFILENAME FS "company" FS  "pattern" FS "company value should match: /^(AINS|ALPC|ANC|APLY|BLUE|CFPL|CFS|DAIS|FOFP|GOA|HPFP|HLFP|MDFP|MWWC|SFPI|SLPC|SPRA|SUND|TOLK|TOSL|UNKN|UOA|VAND|WFML|WYGP|WYPM)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_plot_number == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "company_plot_number value is required but was empty" FS "company_plot_number"} 
action == "validate:summary" && NR > 1 && company_plot_number == "" { key=CSVFILENAME FS "company_plot_number" FS  "required" FS "company_plot_number value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_plot_number != "" && length(company_plot_number) > 15 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "company_plot_number max length is: 15" FS "company_plot_number"} 
action == "validate:summary" && NR > 1 && company_plot_number != "" && length(company_plot_number) > 15 { key=CSVFILENAME FS "company_plot_number" FS  "maxLength" FS "company_plot_number max length is: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_number != "" && !is_integer(treatment_number) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "treatment_number should be an integer" FS "treatment_number"} 
action == "validate:summary" && NR > 1 && treatment_number != "" && !is_integer(treatment_number) { key=CSVFILENAME FS "treatment_number" FS  "type" FS "treatment_number should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_number == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "treatment_number value is required but was empty" FS "treatment_number"} 
action == "validate:summary" && NR > 1 && treatment_number == "" { key=CSVFILENAME FS "treatment_number" FS  "required" FS "treatment_number value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_number != "" && treatment_number < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "treatment_number value should be greater or equal to: 1" FS "treatment_number"} 
action == "validate:summary" && NR > 1 && treatment_number != "" && treatment_number < 1 { key=CSVFILENAME FS "treatment_number" FS  "minimum" FS "treatment_number value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_number != "" && treatment_number > 12 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "treatment_number value should be less or equal to: 12" FS "treatment_number"} 
action == "validate:summary" && NR > 1 && treatment_number != "" && treatment_number > 12 { key=CSVFILENAME FS "treatment_number" FS  "maximum" FS "treatment_number value should be less or equal to: 12" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_code == "" { log_err("error"); print  NR FS CSVFILENAME FS  FS "required" FS "error" FS  "treatment_code value is required but was empty" FS "treatment_code"} 
action == "validate:summary" && NR > 1 && treatment_code == "" { key=CSVFILENAME FS "treatment_code" FS  "required" FS "treatment_code value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_code != "" && treatment_code !~ /^(B|C|CT|D|F|FI|H|M|NK|NT|P|PC|S|SA|SM|TH|TW|UP|UA)$/ { log_err("error"); print  NR FS CSVFILENAME FS  FS "pattern" FS "error" FS  "treatment_code value should match: /^(B|C|CT|D|F|FI|H|M|NK|NT|P|PC|S|SA|SM|TH|TW|UP|UA)$/" FS "treatment_code"} 
action == "validate:summary" && NR > 1 && treatment_code != "" && treatment_code !~ /^(B|C|CT|D|F|FI|H|M|NK|NT|P|PC|S|SA|SM|TH|TW|UP|UA)$/ { key=CSVFILENAME FS "treatment_code" FS  "pattern" FS "treatment_code value should match: /^(B|C|CT|D|F|FI|H|M|NK|NT|P|PC|S|SA|SM|TH|TW|UP|UA)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_year != "" && !is_integer(treatment_year) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "treatment_year should be an integer" FS "treatment_year"} 
action == "validate:summary" && NR > 1 && treatment_year != "" && !is_integer(treatment_year) { key=CSVFILENAME FS "treatment_year" FS  "type" FS "treatment_year should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_year != "" && treatment_year < 1900 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "treatment_year value should be greater or equal to: 1900" FS "treatment_year"} 
action == "validate:summary" && NR > 1 && treatment_year != "" && treatment_year < 1900 { key=CSVFILENAME FS "treatment_year" FS  "minimum" FS "treatment_year value should be greater or equal to: 1900" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_year != "" && treatment_year > 2050 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "treatment_year value should be less or equal to: 2050" FS "treatment_year"} 
action == "validate:summary" && NR > 1 && treatment_year != "" && treatment_year > 2050 { key=CSVFILENAME FS "treatment_year" FS  "maximum" FS "treatment_year value should be less or equal to: 2050" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_month != "" && !is_integer(treatment_month) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "treatment_month should be an integer" FS "treatment_month"} 
action == "validate:summary" && NR > 1 && treatment_month != "" && !is_integer(treatment_month) { key=CSVFILENAME FS "treatment_month" FS  "type" FS "treatment_month should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_month != "" && treatment_month < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "treatment_month value should be greater or equal to: 1" FS "treatment_month"} 
action == "validate:summary" && NR > 1 && treatment_month != "" && treatment_month < 1 { key=CSVFILENAME FS "treatment_month" FS  "minimum" FS "treatment_month value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_month != "" && treatment_month > 12 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "treatment_month value should be less or equal to: 12" FS "treatment_month"} 
action == "validate:summary" && NR > 1 && treatment_month != "" && treatment_month > 12 { key=CSVFILENAME FS "treatment_month" FS  "maximum" FS "treatment_month value should be less or equal to: 12" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_day != "" && !is_integer(treatment_day) { log_err("error"); print  NR FS CSVFILENAME FS  FS "type" FS "error" FS  "treatment_day should be an integer" FS "treatment_day"} 
action == "validate:summary" && NR > 1 && treatment_day != "" && !is_integer(treatment_day) { key=CSVFILENAME FS "treatment_day" FS  "type" FS "treatment_day should be an integer" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_day != "" && treatment_day < 1 { log_err("error"); print  NR FS CSVFILENAME FS  FS "minimum" FS "error" FS  "treatment_day value should be greater or equal to: 1" FS "treatment_day"} 
action == "validate:summary" && NR > 1 && treatment_day != "" && treatment_day < 1 { key=CSVFILENAME FS "treatment_day" FS  "minimum" FS "treatment_day value should be greater or equal to: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_day != "" && treatment_day > 31 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maximum" FS "error" FS  "treatment_day value should be less or equal to: 31" FS "treatment_day"} 
action == "validate:summary" && NR > 1 && treatment_day != "" && treatment_day > 31 { key=CSVFILENAME FS "treatment_day" FS  "maximum" FS "treatment_day value should be less or equal to: 31" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && treatment_comment != "" && length(treatment_comment) > 250 { log_err("error"); print  NR FS CSVFILENAME FS  FS "maxLength" FS "error" FS  "treatment_comment max length is: 250" FS "treatment_comment"} 
action == "validate:summary" && NR > 1 && treatment_comment != "" && length(treatment_comment) > 250 { key=CSVFILENAME FS "treatment_comment" FS  "maxLength" FS "treatment_comment max length is: 250" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 

# sanitize rules
action ~ /^(sanitize|insert)$/ && NR > 1 {
    if (company_plot_number == "") $2 = "\\N"
    if (treatment_month == "") $6 = "\\N"
    if (treatment_year == "") $5 = "\\N"
    if (treatment_number == "") $3 = "\\N"
    if (company == "") $1 = "\\N"
    if (treatment_comment == "") $8 = "\\N"
    if (treatment_day == "") $7 = "\\N"
    if (treatment_code == "") $4 = "\\N"
}

# action handlers
action == "insert" && NR == 1 {
    print "SET client_encoding = 'UTF8';"
    print "COPY " schema "treatment (" addfields FS "source_row_index" FS $0 ") FROM stdin;"
}
action == "insert" && NR > 1 {
   record = addvals "\t" NR
   for (i = 1; i <= NF; i++) {
       record = record "\t" $i
   }
   print record
}
action == "table" && NR == 1 {
     print "CREATE TABLE IF NOT EXISTS treatment (company text,company_plot_number text,treatment_number integer,treatment_code text,treatment_year integer,treatment_month integer,treatment_day integer,treatment_comment text);"
}
action == "sanitize" { print }
# la fin
END {
    if (action == "validate:summary" && length(dupkeys) > 0) for (dup in dupkeys) { violation=CSVFILENAME FS "" FS  "duplicate" FS dup " violates pkey" FS "error"; violations[violation] = dupkeys[dup]}
    if (action == "validate:summary") { if (length(violations) > 0) for (violation in violations) { print violation FS violations[violation]; } }
    if (action == "insert") print "\\." RS
    if (action == "validate" && options["summary"] == "true") { print RS "violation summary: " RS "   counts:   " RS "      total: " err_count; print_cats(cats); }
}
