#!/usr/bin/awk -F, -f

# generated by: awk-csvalid https://github.com/tesera/awk-csvalid

# awk-csvalid csv toolset generator: https://github.com/tesera/awk-csvalid
# usage:
#    validate:     awk -f action=validate validator.awk > violations.txt
#    create table: awk -v action=table -f validator.awk | psql afgo_dev
#    sanitize csv: awk -v action=sanitize -f validator.awk > sanitized.csv
#    insert sql:   awk -v action=insert -f validator.awk | psql afgo_dev

# awk is a simple unix text file parser: http://www.gnu.org/software/gawk/manual/gawk.html
# awk primer:
#    NR = number/index current record
#    RS = record seperator new line i.e. \n
#    FS = field seperator i.e. ,
#    /pattern/ { expression } = if pattern is truthy run expression

BEGIN {
    FS=","; OFS=","; err_count=0; cats["na"]=0;
    if(!action) action = "validate"
    summary_header="file_name,field_name,rule,message,violation_count"
    CSVFILENAME = CSVFILENAME ? CSVFILENAME : FILENAME
}

# builtin helper functions
function eql(x,y) {v=1; for (i in x) v=(v&&x[i]==y[i]); return v;}
function are_headers_valid(valid_headers) { v=0; split($0, h, ","); split(valid_headers, vh, "|"); return eql(h, vh); }
function is_unique(i, val) { if (vals[i,val]) { return 0; } else { vals[i,val] = 1; return 1; } }
function is_numeric(x){ return(x==x+0) }
function print_cats(categories) { for (category in categories) { if (categories[category]) print "      " category ": " categories[category]; } }
function log_err(cat) { cats[cat]++; err_count++; }


#get rid of the evil windows cr
{ sub("\r$", "") }


{
     for (i = 1; i <= NF; i++) {
         if (substr($i, 1, 1) == "\"") {
             len = length($i)
             $i = substr($i, 2, len - 2)
         }
     }
}


# make header index/map
NR > 1 {
    company=$1
    company_plot_number=$2
    measurement_number=$3
    tree_number=$4
    tree_type=$5
    dbh=$6
    dbh_height=$7
    rcd=$8
    rcd_height=$9
    height=$10
    crown_class=$11
    dbh_age=$12
    stump_age=$13
    stump_height=$14
    total_age=$15
    htlc=$16
    crown_diameter_ns=$17
    crown_diameter_ew=$18
    condition_code1=$19
    cause1=$20
    severity1=$21
    condition_code2=$22
    cause2=$23
    severity2=$24
    condition_code3=$25
    cause3=$26
    severity3=$27
    trees_measurement_comment=$28
}

# awk rules based on user csv ruleset
NR == 1 && action == "validate" { headers="company|company_plot_number|measurement_number|tree_number|tree_type|dbh|dbh_height|rcd|rcd_height|height|crown_class|dbh_age|stump_age|stump_height|total_age|htlc|crown_diameter_ns|crown_diameter_ew|condition_code1|cause1|severity1|condition_code2|cause2|severity2|condition_code3|cause3|severity3|trees_measurement_comment"; if (!are_headers_valid(headers)) { gsub(/\|/, FS, headers); print RS "INVALID HEADERS IN " CSVFILENAME RS "WAS: " RS $0 RS "EXPECTED:" RS headers RS; exit 0; } }
NR == 1 && action == "validate:summary" { headers="company|company_plot_number|measurement_number|tree_number|tree_type|dbh|dbh_height|rcd|rcd_height|height|crown_class|dbh_age|stump_age|stump_height|total_age|htlc|crown_diameter_ns|crown_diameter_ew|condition_code1|cause1|severity1|condition_code2|cause2|severity2|condition_code3|cause3|severity3|trees_measurement_comment"; if (!are_headers_valid(headers)) { violations[CSVFILENAME FS "headers" FS  "names" FS "csv headers are invalid" FS "error"]=1; exit 0; } }
action ~ /validate/ && NR > 1 { pkey=company "-" company_plot_number "-" measurement_number "-" tree_number; if(keys[pkey]) { if (dupkeys[pkey]) dupkeys[pkey]++; else dupkeys[pkey] = 1 } else { keys[pkey] = NR } }
action == "validate" && NR > 1 && company == "" { log_err("error"); print "Field company in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && company == "" { key=CSVFILENAME FS "company" FS  "required" FS "value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company != "" && company !~ /^(AINS|GOA|APLY|ALPC|ANC|BLUE|CFPL|CFS|DAIS|FOFP|MDFP|MWWC|SLPC|SPRA|SUND|SFPI|HLFP|TOLK|TOSL|UOA|VAND|WFML|WYGP|WYPM|UNKN|HPFP)$/ { log_err("error"); print "company in " CSVFILENAME " line " NR " should match the following pattern /^(AINS|GOA|APLY|ALPC|ANC|BLUE|CFPL|CFS|DAIS|FOFP|MDFP|MWWC|SLPC|SPRA|SUND|SFPI|HLFP|TOLK|TOSL|UOA|VAND|WFML|WYGP|WYPM|UNKN|HPFP)$/ and was " company " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && company != "" && company !~ /^(AINS|GOA|APLY|ALPC|ANC|BLUE|CFPL|CFS|DAIS|FOFP|MDFP|MWWC|SLPC|SPRA|SUND|SFPI|HLFP|TOLK|TOSL|UOA|VAND|WFML|WYGP|WYPM|UNKN|HPFP)$/ { key=CSVFILENAME FS "company" FS  "pattern" FS "value should match: /^(AINS|GOA|APLY|ALPC|ANC|BLUE|CFPL|CFS|DAIS|FOFP|MDFP|MWWC|SLPC|SPRA|SUND|SFPI|HLFP|TOLK|TOSL|UOA|VAND|WFML|WYGP|WYPM|UNKN|HPFP)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_plot_number == "" { log_err("error"); print "Field company_plot_number in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && company_plot_number == "" { key=CSVFILENAME FS "company_plot_number" FS  "required" FS "value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && company_plot_number != "" && length(company_plot_number) > 15 { log_err("error"); print "company_plot_number length in " CSVFILENAME " line " NR " should be less than 15 and was " length(company_plot_number) " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && company_plot_number != "" && length(company_plot_number) > 15 { key=CSVFILENAME FS "company_plot_number" FS  "maxLength" FS "max length is: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && measurement_number && !is_numeric(measurement_number) { log_err("error"); print "Field measurement_number in " CSVFILENAME " line " NR " should be a numeric but was " measurement_number " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && measurement_number && !is_numeric(measurement_number) { key=CSVFILENAME FS "measurement_number" FS  "type" FS "max length is: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && measurement_number == "" { log_err("error"); print "Field measurement_number in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && measurement_number == "" { key=CSVFILENAME FS "measurement_number" FS  "required" FS "value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && measurement_number != "" && length(measurement_number) > 2 { log_err("error"); print "measurement_number length in " CSVFILENAME " line " NR " should be less than 2 and was " length(measurement_number) " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && measurement_number != "" && length(measurement_number) > 2 { key=CSVFILENAME FS "measurement_number" FS  "maxLength" FS "max length is: 2" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && tree_number && !is_numeric(tree_number) { log_err("error"); print "Field tree_number in " CSVFILENAME " line " NR " should be a numeric but was " tree_number " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && tree_number && !is_numeric(tree_number) { key=CSVFILENAME FS "tree_number" FS  "type" FS "max length is: 2" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && tree_number == "" { log_err("error"); print "Field tree_number in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && tree_number == "" { key=CSVFILENAME FS "tree_number" FS  "required" FS "value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && tree_number != "" && tree_number < 1 { log_err("error"); print "tree_number in " CSVFILENAME " line " NR " should be greater than 1 and was " tree_number " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && tree_number != "" && tree_number < 1 { key=CSVFILENAME FS "tree_number" FS  "minimum" FS "value should be greater than: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && tree_number != "" && tree_number > 9999999 { log_err("error"); print "tree_number in " CSVFILENAME " line " NR " should be less than 9999999 and was " tree_number " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && tree_number != "" && tree_number > 9999999 { key=CSVFILENAME FS "tree_number" FS  "maximum" FS "value should be less than: 9999999" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && tree_type == "" { log_err("error"); print "Field tree_type in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && tree_type == "" { key=CSVFILENAME FS "tree_type" FS  "required" FS "value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && tree_type != "" && tree_type !~ /^(T|S|ES|ET|B|R1|R2|R3|R4|R5|R6|R7|R8|R9|R10)$/ { log_err("error"); print "tree_type in " CSVFILENAME " line " NR " should match the following pattern /^(T|S|ES|ET|B|R1|R2|R3|R4|R5|R6|R7|R8|R9|R10)$/ and was " tree_type " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && tree_type != "" && tree_type !~ /^(T|S|ES|ET|B|R1|R2|R3|R4|R5|R6|R7|R8|R9|R10)$/ { key=CSVFILENAME FS "tree_type" FS  "pattern" FS "value should match: /^(T|S|ES|ET|B|R1|R2|R3|R4|R5|R6|R7|R8|R9|R10)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh && !is_numeric(dbh) { log_err("error"); print "Field dbh in " CSVFILENAME " line " NR " should be a numeric but was " dbh " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh && !is_numeric(dbh) { key=CSVFILENAME FS "dbh" FS  "type" FS "value should match: /^(T|S|ES|ET|B|R1|R2|R3|R4|R5|R6|R7|R8|R9|R10)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh != "" && dbh < 0.1 { log_err("error"); print "dbh in " CSVFILENAME " line " NR " should be greater than 0.1 and was " dbh " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh != "" && dbh < 0.1 { key=CSVFILENAME FS "dbh" FS  "minimum" FS "value should be greater than: 0.1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh != "" && dbh > 120 { log_err("error"); print "dbh in " CSVFILENAME " line " NR " should be less than 120 and was " dbh " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh != "" && dbh > 120 { key=CSVFILENAME FS "dbh" FS  "maximum" FS "value should be less than: 120" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh_height && !is_numeric(dbh_height) { log_err("error"); print "Field dbh_height in " CSVFILENAME " line " NR " should be a numeric but was " dbh_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh_height && !is_numeric(dbh_height) { key=CSVFILENAME FS "dbh_height" FS  "type" FS "value should be less than: 120" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh_height != "" && dbh_height < 1.1 { log_err("error"); print "dbh_height in " CSVFILENAME " line " NR " should be greater than 1.1 and was " dbh_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh_height != "" && dbh_height < 1.1 { key=CSVFILENAME FS "dbh_height" FS  "minimum" FS "value should be greater than: 1.1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh_height != "" && dbh_height > 1.5 { log_err("error"); print "dbh_height in " CSVFILENAME " line " NR " should be less than 1.5 and was " dbh_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh_height != "" && dbh_height > 1.5 { key=CSVFILENAME FS "dbh_height" FS  "maximum" FS "value should be less than: 1.5" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && rcd && !is_numeric(rcd) { log_err("error"); print "Field rcd in " CSVFILENAME " line " NR " should be a numeric but was " rcd " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && rcd && !is_numeric(rcd) { key=CSVFILENAME FS "rcd" FS  "type" FS "value should be less than: 1.5" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && rcd != "" && rcd < 0.1 { log_err("error"); print "rcd in " CSVFILENAME " line " NR " should be greater than 0.1 and was " rcd " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && rcd != "" && rcd < 0.1 { key=CSVFILENAME FS "rcd" FS  "minimum" FS "value should be greater than: 0.1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && rcd != "" && rcd > 15 { log_err("error"); print "rcd in " CSVFILENAME " line " NR " should be less than 15 and was " rcd " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && rcd != "" && rcd > 15 { key=CSVFILENAME FS "rcd" FS  "maximum" FS "value should be less than: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && rcd_height && !is_numeric(rcd_height) { log_err("error"); print "Field rcd_height in " CSVFILENAME " line " NR " should be a numeric but was " rcd_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && rcd_height && !is_numeric(rcd_height) { key=CSVFILENAME FS "rcd_height" FS  "type" FS "value should be less than: 15" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && rcd_height != "" && rcd_height < 0 { log_err("error"); print "rcd_height in " CSVFILENAME " line " NR " should be greater than 0 and was " rcd_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && rcd_height != "" && rcd_height < 0 { key=CSVFILENAME FS "rcd_height" FS  "minimum" FS "value should be greater than: 0" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && rcd_height != "" && rcd_height > 0.3 { log_err("error"); print "rcd_height in " CSVFILENAME " line " NR " should be less than 0.3 and was " rcd_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && rcd_height != "" && rcd_height > 0.3 { key=CSVFILENAME FS "rcd_height" FS  "maximum" FS "value should be less than: 0.3" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && height && !is_numeric(height) { log_err("error"); print "Field height in " CSVFILENAME " line " NR " should be a numeric but was " height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && height && !is_numeric(height) { key=CSVFILENAME FS "height" FS  "type" FS "value should be less than: 0.3" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && height != "" && height < 0.01 { log_err("error"); print "height in " CSVFILENAME " line " NR " should be greater than 0.01 and was " height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && height != "" && height < 0.01 { key=CSVFILENAME FS "height" FS  "minimum" FS "value should be greater than: 0.01" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && height != "" && height > 45 { log_err("error"); print "height in " CSVFILENAME " line " NR " should be less than 45 and was " height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && height != "" && height > 45 { key=CSVFILENAME FS "height" FS  "maximum" FS "value should be less than: 45" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_class == "" { log_err("warning"); print "Field crown_class in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_class == "" { key=CSVFILENAME FS "crown_class" FS  "required" FS "value is required but was empty" FS "warning"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_class != "" && crown_class !~ /^(D|C|I|S|N)$/ { log_err("error"); print "crown_class in " CSVFILENAME " line " NR " should match the following pattern /^(D|C|I|S|N)$/ and was " crown_class " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_class != "" && crown_class !~ /^(D|C|I|S|N)$/ { key=CSVFILENAME FS "crown_class" FS  "pattern" FS "value should match: /^(D|C|I|S|N)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh_age && !is_numeric(dbh_age) { log_err("error"); print "Field dbh_age in " CSVFILENAME " line " NR " should be a numeric but was " dbh_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh_age && !is_numeric(dbh_age) { key=CSVFILENAME FS "dbh_age" FS  "type" FS "value should match: /^(D|C|I|S|N)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh_age != "" && dbh_age < 1 { log_err("error"); print "dbh_age in " CSVFILENAME " line " NR " should be greater than 1 and was " dbh_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh_age != "" && dbh_age < 1 { key=CSVFILENAME FS "dbh_age" FS  "minimum" FS "value should be greater than: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && dbh_age != "" && dbh_age > 350 { log_err("error"); print "dbh_age in " CSVFILENAME " line " NR " should be less than 350 and was " dbh_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && dbh_age != "" && dbh_age > 350 { key=CSVFILENAME FS "dbh_age" FS  "maximum" FS "value should be less than: 350" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && stump_age && !is_numeric(stump_age) { log_err("error"); print "Field stump_age in " CSVFILENAME " line " NR " should be a numeric but was " stump_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && stump_age && !is_numeric(stump_age) { key=CSVFILENAME FS "stump_age" FS  "type" FS "value should be less than: 350" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && stump_age != "" && stump_age < 1 { log_err("error"); print "stump_age in " CSVFILENAME " line " NR " should be greater than 1 and was " stump_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && stump_age != "" && stump_age < 1 { key=CSVFILENAME FS "stump_age" FS  "minimum" FS "value should be greater than: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && stump_age != "" && stump_age > 350 { log_err("error"); print "stump_age in " CSVFILENAME " line " NR " should be less than 350 and was " stump_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && stump_age != "" && stump_age > 350 { key=CSVFILENAME FS "stump_age" FS  "maximum" FS "value should be less than: 350" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && stump_height && !is_numeric(stump_height) { log_err("error"); print "Field stump_height in " CSVFILENAME " line " NR " should be a numeric but was " stump_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && stump_height && !is_numeric(stump_height) { key=CSVFILENAME FS "stump_height" FS  "type" FS "value should be less than: 350" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && stump_height != "" && stump_height < 0 { log_err("error"); print "stump_height in " CSVFILENAME " line " NR " should be greater than 0 and was " stump_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && stump_height != "" && stump_height < 0 { key=CSVFILENAME FS "stump_height" FS  "minimum" FS "value should be greater than: 0" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && stump_height != "" && stump_height > 0.3 { log_err("error"); print "stump_height in " CSVFILENAME " line " NR " should be less than 0.3 and was " stump_height " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && stump_height != "" && stump_height > 0.3 { key=CSVFILENAME FS "stump_height" FS  "maximum" FS "value should be less than: 0.3" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && total_age && !is_numeric(total_age) { log_err("error"); print "Field total_age in " CSVFILENAME " line " NR " should be a numeric but was " total_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && total_age && !is_numeric(total_age) { key=CSVFILENAME FS "total_age" FS  "type" FS "value should be less than: 0.3" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && total_age != "" && total_age < 1 { log_err("error"); print "total_age in " CSVFILENAME " line " NR " should be greater than 1 and was " total_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && total_age != "" && total_age < 1 { key=CSVFILENAME FS "total_age" FS  "minimum" FS "value should be greater than: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && total_age != "" && total_age > 350 { log_err("error"); print "total_age in " CSVFILENAME " line " NR " should be less than 350 and was " total_age " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && total_age != "" && total_age > 350 { key=CSVFILENAME FS "total_age" FS  "maximum" FS "value should be less than: 350" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && htlc && !is_numeric(htlc) { log_err("error"); print "Field htlc in " CSVFILENAME " line " NR " should be a numeric but was " htlc " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && htlc && !is_numeric(htlc) { key=CSVFILENAME FS "htlc" FS  "type" FS "value should be less than: 350" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && htlc != "" && htlc < 0 { log_err("error"); print "htlc in " CSVFILENAME " line " NR " should be greater than 0 and was " htlc " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && htlc != "" && htlc < 0 { key=CSVFILENAME FS "htlc" FS  "minimum" FS "value should be greater than: 0" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && htlc != "" && htlc > 45 { log_err("error"); print "htlc in " CSVFILENAME " line " NR " should be less than 45 and was " htlc " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && htlc != "" && htlc > 45 { key=CSVFILENAME FS "htlc" FS  "maximum" FS "value should be less than: 45" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_diameter_ns && !is_numeric(crown_diameter_ns) { log_err("error"); print "Field crown_diameter_ns in " CSVFILENAME " line " NR " should be a numeric but was " crown_diameter_ns " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_diameter_ns && !is_numeric(crown_diameter_ns) { key=CSVFILENAME FS "crown_diameter_ns" FS  "type" FS "value should be less than: 45" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_diameter_ns != "" && crown_diameter_ns < 1 { log_err("error"); print "crown_diameter_ns in " CSVFILENAME " line " NR " should be greater than 1 and was " crown_diameter_ns " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_diameter_ns != "" && crown_diameter_ns < 1 { key=CSVFILENAME FS "crown_diameter_ns" FS  "minimum" FS "value should be greater than: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_diameter_ns != "" && crown_diameter_ns > 20 { log_err("error"); print "crown_diameter_ns in " CSVFILENAME " line " NR " should be less than 20 and was " crown_diameter_ns " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_diameter_ns != "" && crown_diameter_ns > 20 { key=CSVFILENAME FS "crown_diameter_ns" FS  "maximum" FS "value should be less than: 20" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_diameter_ew && !is_numeric(crown_diameter_ew) { log_err("error"); print "Field crown_diameter_ew in " CSVFILENAME " line " NR " should be a numeric but was " crown_diameter_ew " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_diameter_ew && !is_numeric(crown_diameter_ew) { key=CSVFILENAME FS "crown_diameter_ew" FS  "type" FS "value should be less than: 20" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_diameter_ew != "" && crown_diameter_ew < 1 { log_err("error"); print "crown_diameter_ew in " CSVFILENAME " line " NR " should be greater than 1 and was " crown_diameter_ew " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_diameter_ew != "" && crown_diameter_ew < 1 { key=CSVFILENAME FS "crown_diameter_ew" FS  "minimum" FS "value should be greater than: 1" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && crown_diameter_ew != "" && crown_diameter_ew > 20 { log_err("error"); print "crown_diameter_ew in " CSVFILENAME " line " NR " should be less than 20 and was " crown_diameter_ew " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && crown_diameter_ew != "" && crown_diameter_ew > 20 { key=CSVFILENAME FS "crown_diameter_ew" FS  "maximum" FS "value should be less than: 20" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code1 && !is_numeric(condition_code1) { log_err("error"); print "Field condition_code1 in " CSVFILENAME " line " NR " should be a numeric but was " condition_code1 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code1 && !is_numeric(condition_code1) { key=CSVFILENAME FS "condition_code1" FS  "type" FS "value should be less than: 20" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code1 == "" { log_err("error"); print "Field condition_code1 in " CSVFILENAME " line " NR " is required" RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code1 == "" { key=CSVFILENAME FS "condition_code1" FS  "required" FS "value is required but was empty" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code1 != "" && condition_code1 !~ /^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)$/ { log_err("error"); print "condition_code1 in " CSVFILENAME " line " NR " should match the following pattern /^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)$/ and was " condition_code1 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code1 != "" && condition_code1 !~ /^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)$/ { key=CSVFILENAME FS "condition_code1" FS  "pattern" FS "value should match: /^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && cause1 && !is_numeric(cause1) { log_err("error"); print "Field cause1 in " CSVFILENAME " line " NR " should be a numeric but was " cause1 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && cause1 && !is_numeric(cause1) { key=CSVFILENAME FS "cause1" FS  "type" FS "value should match: /^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && cause1 != "" && cause1 !~ /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ { log_err("error"); print "cause1 in " CSVFILENAME " line " NR " should match the following pattern /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ and was " cause1 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && cause1 != "" && cause1 !~ /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ { key=CSVFILENAME FS "cause1" FS  "pattern" FS "value should match: /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && severity1 && !is_numeric(severity1) { log_err("error"); print "Field severity1 in " CSVFILENAME " line " NR " should be a numeric but was " severity1 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && severity1 && !is_numeric(severity1) { key=CSVFILENAME FS "severity1" FS  "type" FS "value should match: /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && severity1 != "" && severity1 !~ /^(1|2|3|9)$/ { log_err("error"); print "severity1 in " CSVFILENAME " line " NR " should match the following pattern /^(1|2|3|9)$/ and was " severity1 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && severity1 != "" && severity1 !~ /^(1|2|3|9)$/ { key=CSVFILENAME FS "severity1" FS  "pattern" FS "value should match: /^(1|2|3|9)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code2 && !is_numeric(condition_code2) { log_err("error"); print "Field condition_code2 in " CSVFILENAME " line " NR " should be a numeric but was " condition_code2 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code2 && !is_numeric(condition_code2) { key=CSVFILENAME FS "condition_code2" FS  "type" FS "value should match: /^(1|2|3|9)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code2 != "" && condition_code2 !~ /^(3|4|5|6|7|8|9|10|11|12|16)$/ { log_err("error"); print "condition_code2 in " CSVFILENAME " line " NR " should match the following pattern /^(3|4|5|6|7|8|9|10|11|12|16)$/ and was " condition_code2 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code2 != "" && condition_code2 !~ /^(3|4|5|6|7|8|9|10|11|12|16)$/ { key=CSVFILENAME FS "condition_code2" FS  "pattern" FS "value should match: /^(3|4|5|6|7|8|9|10|11|12|16)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && cause2 && !is_numeric(cause2) { log_err("error"); print "Field cause2 in " CSVFILENAME " line " NR " should be a numeric but was " cause2 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && cause2 && !is_numeric(cause2) { key=CSVFILENAME FS "cause2" FS  "type" FS "value should match: /^(3|4|5|6|7|8|9|10|11|12|16)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && cause2 != "" && cause2 !~ /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ { log_err("error"); print "cause2 in " CSVFILENAME " line " NR " should match the following pattern /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ and was " cause2 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && cause2 != "" && cause2 !~ /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ { key=CSVFILENAME FS "cause2" FS  "pattern" FS "value should match: /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && severity2 && !is_numeric(severity2) { log_err("error"); print "Field severity2 in " CSVFILENAME " line " NR " should be a numeric but was " severity2 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && severity2 && !is_numeric(severity2) { key=CSVFILENAME FS "severity2" FS  "type" FS "value should match: /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && severity2 != "" && severity2 !~ /^(1|2|3|9)$/ { log_err("error"); print "severity2 in " CSVFILENAME " line " NR " should match the following pattern /^(1|2|3|9)$/ and was " severity2 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && severity2 != "" && severity2 !~ /^(1|2|3|9)$/ { key=CSVFILENAME FS "severity2" FS  "pattern" FS "value should match: /^(1|2|3|9)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code3 && !is_numeric(condition_code3) { log_err("error"); print "Field condition_code3 in " CSVFILENAME " line " NR " should be a numeric but was " condition_code3 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code3 && !is_numeric(condition_code3) { key=CSVFILENAME FS "condition_code3" FS  "type" FS "value should match: /^(1|2|3|9)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && condition_code3 != "" && condition_code3 !~ /^(3|4|5|6|7|8|9|10|11|12|16)$/ { log_err("error"); print "condition_code3 in " CSVFILENAME " line " NR " should match the following pattern /^(3|4|5|6|7|8|9|10|11|12|16)$/ and was " condition_code3 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && condition_code3 != "" && condition_code3 !~ /^(3|4|5|6|7|8|9|10|11|12|16)$/ { key=CSVFILENAME FS "condition_code3" FS  "pattern" FS "value should match: /^(3|4|5|6|7|8|9|10|11|12|16)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && cause3 && !is_numeric(cause3) { log_err("error"); print "Field cause3 in " CSVFILENAME " line " NR " should be a numeric but was " cause3 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && cause3 && !is_numeric(cause3) { key=CSVFILENAME FS "cause3" FS  "type" FS "value should match: /^(3|4|5|6|7|8|9|10|11|12|16)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && cause3 != "" && cause3 !~ /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ { log_err("error"); print "cause3 in " CSVFILENAME " line " NR " should match the following pattern /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ and was " cause3 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && cause3 != "" && cause3 !~ /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/ { key=CSVFILENAME FS "cause3" FS  "pattern" FS "value should match: /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && severity3 && !is_numeric(severity3) { log_err("error"); print "Field severity3 in " CSVFILENAME " line " NR " should be a numeric but was " severity3 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && severity3 && !is_numeric(severity3) { key=CSVFILENAME FS "severity3" FS  "type" FS "value should match: /^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|99)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && severity3 != "" && severity3 !~ /^(1|2|3|9)$/ { log_err("error"); print "severity3 in " CSVFILENAME " line " NR " should match the following pattern /^(1|2|3|9)$/ and was " severity3 " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && severity3 != "" && severity3 !~ /^(1|2|3|9)$/ { key=CSVFILENAME FS "severity3" FS  "pattern" FS "value should match: /^(1|2|3|9)$/" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 
action == "validate" && NR > 1 && trees_measurement_comment != "" && length(trees_measurement_comment) > 250 { log_err("error"); print "trees_measurement_comment length in " CSVFILENAME " line " NR " should be less than 250 and was " length(trees_measurement_comment) " " RS $0 RS; } 
action == "validate:summary" && NR > 1 && trees_measurement_comment != "" && length(trees_measurement_comment) > 250 { key=CSVFILENAME FS "trees_measurement_comment" FS  "maxLength" FS "max length is: 250" FS "error"; if(!violations[key]) { violations[key]=0; } violations[key]++; } 

# sanitize rules
action ~ /^(sanitize|insert)$/ && NR > 1 {
    if (stump_age == "") $13 = "\\N"
    if (dbh == "") $6 = "\\N"
    if (tree_number == "") $4 = "\\N"
    if (measurement_number == "") $3 = "\\N"
    if (crown_diameter_ew == "") $18 = "\\N"
    if (condition_code1 == "") $19 = "\\N"
    if (rcd_height == "") $9 = "\\N"
    if (rcd == "") $8 = "\\N"
    if (condition_code2 == "") $22 = "\\N"
    if (cause1 == "") $20 = "\\N"
    if (height == "") $10 = "\\N"
    if (dbh_height == "") $7 = "\\N"
    if (trees_measurement_comment == "") $28 = "\\N"
    if (condition_code3 == "") $25 = "\\N"
    if (cause2 == "") $23 = "\\N"
    if (dbh_age == "") $12 = "\\N"
    if (company_plot_number == "") $2 = "\\N"
    if (cause3 == "") $26 = "\\N"
    if (htlc == "") $16 = "\\N"
    if (crown_diameter_ns == "") $17 = "\\N"
    if (total_age == "") $15 = "\\N"
    if (stump_height == "") $14 = "\\N"
    if (tree_type == "") $5 = "\\N"
    if (severity1 == "") $21 = "\\N"
    if (crown_class == "") $11 = "\\N"
    if (company == "") $1 = "\\N"
    if (severity2 == "") $24 = "\\N"
    if (severity3 == "") $27 = "\\N"
}

# action handlers
action == "insert" && NR == 1 {
    print "COPY trees_measurement (" addfields FS "source_row_index" FS $0 ") FROM stdin;"
}
action == "insert" && NR > 1 {
   record = addvals "\t" NR
   for (i = 1; i <= NF; i++) {
       record = record "\t" $i
   }
   print record
}
action == "table" && NR == 1 {
     print "CREATE TABLE IF NOT EXISTS trees_measurement (company ,company_plot_number ,measurement_number ,tree_number ,tree_type ,dbh ,dbh_height ,rcd ,rcd_height ,height ,crown_class ,dbh_age ,stump_age ,stump_height ,total_age ,htlc ,crown_diameter_ns ,crown_diameter_ew ,condition_code1 ,cause1 ,severity1 ,condition_code2 ,cause2 ,severity2 ,condition_code3 ,cause3 ,severity3 ,trees_measurement_comment , CONSTRAINT trees_measurement_pkey PRIMARY KEY (company,company_plot_number,measurement_number,tree_number) , CONSTRAINT trees_measurement_trees_fkey FOREIGN KEY (company,company_plot_number,tree_number) REFERENCES trees (company,company_plot_number,tree_number) MATCH FULL ON UPDATE CASCADE ON DELETE NO ACTION);"
}
action == "sanitize" { print }
# la fin
END {
    if (action == "validate:summary" && length(dupkeys) > 0) for (dup in dupkeys) { violation=CSVFILENAME FS "company|company_plot_number|measurement_number|tree_number" FS  "duplicate" FS dup " violates pkey" FS "error"; violations[violation] = dupkeys[dup]}
    if (action == "validate:summary") { if (length(violations) > 0) for (violation in violations) { print violation FS violations[violation]; } }
    if (action == "validate" && options["summary"] == "true") { print RS "violation summary: " RS "   counts:   " RS "      total: " err_count; print_cats(cats); }
}
